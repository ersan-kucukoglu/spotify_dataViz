theme(legend.position = "none")
# distribution of the track popularity
ggplot(spotify,aes(x=track_popularity,color = playlist_genre))+
geom_histogram(bins = 10,
aes(y = ..density..)) +
scale_y_continuous(labels = percent_format()) +
facet_wrap(~playlist_genre) +
theme_light()+
labs(x = "Track Popularity",
title = "The Distribution of the Track Popularity")+
theme(legend.position = "none")
# distribution of the track popularity
ggplot(spotify,aes(x=track_popularity,color = playlist_genre))+
geom_histogram()+
facet_wrap(~playlist_genre) +
theme_light()+
labs(x = "Track Popularity",
title = "The Distribution of the Track Popularity")+
theme(legend.position = "none")
# distribution of the track popularity
ggplot(spotify,aes(x=track_popularity,color = playlist_genre))+
geom_histogram(bins=20)+
facet_wrap(~playlist_genre) +
theme_light()+
labs(x = "Track Popularity",
title = "The Distribution of the Track Popularity")+
theme(legend.position = "none")
ggplot(spotify,aes(x=energy))+
geom_histogram()
ggplot(spotify,aes(x=energy))+
geom_histogram() + geom_density()
ggplot(spotify,aes(x=energy))+
geom_histogram() + geom_density(aes(color="blue"))
ggplot(spotify,aes(x=energy))+
geom_histogram(bins=30) + geom_density(aes(color="blue"))
ggplot(spotify,aes(x=energy))+
geom_histogram(bins=30)+
theme_light()+
labs(x = "Energy",
title = "The Distribution of the Energy")
ggplot(spotify,aes(x=energy))+
geom_histogram(bins = 20,
aes(y = ..density..)) +
scale_y_continuous(labels = percent_format()) +
ggplot(spotify,aes(x=energy))+
geom_histogram(bins = 20,
aes(y = ..density..)) +
scale_y_continuous(labels = percent_format()) +
ggplot(spotify,aes(x=energy))+
geom_histogram(bins = 20,
aes(y = ..density..)) +
scale_y_continuous(labels = percent_format())
ggplot(spotify,aes(x=energy))+
geom_histogram(bins=30)+
theme_light()+
labs(x = "Energy",
title = "The Distribution of the Energy")
datasummary(track_popularity + danceability + energy + speechiness + acousticness +
instrumentalness + liveness + valence + tempo + duration_min  ~
Mean + SD + Min +  Max + Median + P95 + N , data = spotify,
title = 'Descriptives of Spotify Songs' ) %>%
kableExtra::kable_styling(latex_options = c("hold_position","striped"))
p2 <- ggplot(top20, aes(x = track_popularity, y = reorder(song,track_popularity), color = energy)) +
geom_point(size = 4) +
geom_segment(aes(xend = 10, yend = song), size = 2)+
geom_text(aes(label = track_popularity), color = "white", size = 2)+
scale_x_continuous("", expand = c(0, 0), limits = c(0, 105), position = "top") +
scale_color_gradientn(colors = brewer.pal(5, "RdYlBu")[-(2:4)])+
labs(caption="Source: tidytuesday:spotify_songs",
title="The most popular 20 songs in 2020 ")+
theme_classic() +
theme(axis.line.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text = element_text(color="black"),
axis.title = element_blank())+
geom_vline(xintercept=mean_popularity, color="grey40", linetype=3)+
annotate(
"text",
x = mean_popularity+5 , y = 5.5,
label = "The\naverage\npopularity",
vjust = 1, size = 3, color = "grey40")+
annotate(
"curve",
x =mean_popularity +5 , y = 5.5,
xend = mean_popularity, yend = 7.5,
arrow = arrow(length = unit(0.2, "cm"), type = "closed"),
color = "grey40"
)
#########################################################
## top 20 by track popularity
top20 <- spotify[year==2020,.(song=unique(track_name)),by=track_popularity][order(desc(track_popularity))][1:20]
View(top20)
#########################################################
## top 20 by track popularity
top20 <- spotify[year==2020,.(song=unique(track_name),energy),by=track_popularity][order(desc(track_popularity))][1:20]
View(top20)
#########################################################
## top 20 by track popularity
top20 <- spotify[year==2020,.(song=unique(track_name,energy)),by=track_popularity][order(desc(track_popularity))][1:20]
View(top20)
#########################################################
## top 20 by track popularity
top20 <- spotify[year==2020,.(song=unique(track_name,energy)),by=track_popularity][order(desc(track_popularity))][1:20]
#########################################################
## top 20 by track popularity
top20 <- spotify[year==2020,.(energy,song=unique(track_name)),by=track_popularity][order(desc(track_popularity))][1:20]
#########################################################
## top 20 by track popularity
top20 <- spotify[year==2020,.(track_popularity,song=unique(track_name)),by=energy][order(desc(track_popularity))][1:20]
#########################################################
## top 20 by track popularity
top20 <- spotify[year==2020 & energy>0.5,.(song=unique(track_name)),by=track_popularity][order(desc(track_popularity))][1:20]
p2 <- ggplot(top20, aes(x = track_popularity, y = reorder(song,track_popularity), color = energy)) +
geom_point(size = 4) +
geom_segment(aes(xend = 10, yend = song), size = 2)+
geom_text(aes(label = track_popularity), color = "white", size = 2)+
scale_x_continuous("", expand = c(0, 0), limits = c(0, 105), position = "top") +
scale_color_gradientn(colors = brewer.pal(5, "RdYlBu")[-(2:4)])+
labs(caption="Source: tidytuesday:spotify_songs",
title="The most popular 20 songs in 2020 ")+
theme_classic() +
theme(axis.line.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text = element_text(color="black"),
axis.title = element_blank())+
geom_vline(xintercept=mean_popularity, color="grey40", linetype=3)+
annotate(
"text",
x = mean_popularity+5 , y = 5.5,
label = "The\naverage\npopularity",
vjust = 1, size = 3, color = "grey40")+
annotate(
"curve",
x =mean_popularity +5 , y = 5.5,
xend = mean_popularity, yend = 7.5,
arrow = arrow(length = unit(0.2, "cm"), type = "closed"),
color = "grey40"
)
p2
p2 <- ggplot(top20, aes(x = track_popularity, y = reorder(song,track_popularity), color = track_popularity)) +
geom_point(size = 4) +
geom_segment(aes(xend = 10, yend = song), size = 2)+
geom_text(aes(label = track_popularity), color = "white", size = 2)+
scale_x_continuous("", expand = c(0, 0), limits = c(0, 105), position = "top") +
scale_color_gradientn(colors = brewer.pal(5, "RdYlBu")[-(2:4)])+
labs(caption="Source: tidytuesday:spotify_songs",
title="The most popular 20 songs in 2020 ")+
theme_classic() +
theme(axis.line.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text = element_text(color="black"),
axis.title = element_blank())+
geom_vline(xintercept=mean_popularity, color="grey40", linetype=3)+
annotate(
"text",
x = mean_popularity+5 , y = 5.5,
label = "The\naverage\npopularity",
vjust = 1, size = 3, color = "grey40")+
annotate(
"curve",
x =mean_popularity +5 , y = 5.5,
xend = mean_popularity, yend = 7.5,
arrow = arrow(length = unit(0.2, "cm"), type = "closed"),
color = "grey40"
)
p2
#########################################################
## top 20 by track popularity
top20 <- spotify[year==2020,.(song=unique(track_name)),by=track_popularity][order(desc(track_popularity))][1:20]
p2 <- ggplot(top20, aes(x = track_popularity, y = reorder(song,track_popularity), color = track_popularity)) +
geom_point(size = 4) +
geom_segment(aes(xend = 10, yend = song), size = 2)+
geom_text(aes(label = track_popularity), color = "white", size = 2)+
scale_x_continuous("", expand = c(0, 0), limits = c(0, 105), position = "top") +
scale_color_gradientn(colors = brewer.pal(5, "RdYlBu")[-(2:4)])+
labs(caption="Source: tidytuesday:spotify_songs",
title="The most popular 20 songs in 2020 ")+
theme_classic() +
theme(axis.line.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text = element_text(color="black"),
axis.title = element_blank())+
geom_vline(xintercept=mean_popularity, color="grey40", linetype=3)+
annotate(
"text",
x = mean_popularity+5 , y = 5.5,
label = "The\naverage\npopularity",
vjust = 1, size = 3, color = "grey40")+
annotate(
"curve",
x =mean_popularity +5 , y = 5.5,
xend = mean_popularity, yend = 7.5,
arrow = arrow(length = unit(0.2, "cm"), type = "closed"),
color = "grey40"
)
p2
p2 <- ggplot(top20, aes(x = track_popularity, y = reorder(song,track_popularity), color = track_popularity)) +
geom_point(size = 4) +
geom_segment(aes(xend = 10, yend = song), size = 2)+
geom_text(aes(label = track_popularity), color = "white", size = 2)+
scale_x_continuous("", expand = c(0, 0), limits = c(0, 105), position = "top") +
scale_color_gradientn(colors = brewer.pal(5, "RdYlBu")[-(2:4)])+
labs(caption="Source: tidytuesday:spotify_songs",
title="The most popular 20 songs in 2020 ")+
theme_classic() +
theme(axis.line.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text = element_text(color="black"),
axis.title = element_blank()
legend.position = "none")+
p2 <- ggplot(top20, aes(x = track_popularity, y = reorder(song,track_popularity), color = track_popularity)) +
geom_point(size = 4) +
geom_segment(aes(xend = 10, yend = song), size = 2)+
geom_text(aes(label = track_popularity), color = "white", size = 2)+
scale_x_continuous("", expand = c(0, 0), limits = c(0, 105), position = "top") +
scale_color_gradientn(colors = brewer.pal(5, "RdYlBu")[-(2:4)])+
labs(caption="Source: tidytuesday:spotify_songs",
title="The most popular 20 songs in 2020 ")+
theme_classic() +
theme(axis.line.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text = element_text(color="black"),
axis.title = element_blank(),
legend.position = "none")+
geom_vline(xintercept=mean_popularity, color="grey40", linetype=3)+
annotate(
"text",
x = mean_popularity+5 , y = 5.5,
label = "The\naverage\npopularity",
vjust = 1, size = 3, color = "grey40")+
annotate(
"curve",
x =mean_popularity +5 , y = 5.5,
xend = mean_popularity, yend = 7.5,
arrow = arrow(length = unit(0.2, "cm"), type = "closed"),
color = "grey40"
)
p2
#########################################################
## top 20 by track popularity
top20 <- spotify[year==2020 & playlist_genre=="pop",.(song=unique(track_name)),by=track_popularity][order(desc(track_popularity))][1:20]
p2 <- ggplot(top20, aes(x = track_popularity, y = reorder(song,track_popularity), color = track_popularity)) +
geom_point(size = 4) +
geom_segment(aes(xend = 10, yend = song), size = 2)+
geom_text(aes(label = track_popularity), color = "white", size = 2)+
scale_x_continuous("", expand = c(0, 0), limits = c(0, 105), position = "top") +
scale_color_gradientn(colors = brewer.pal(5, "RdYlBu")[-(2:4)])+
labs(caption="Source: tidytuesday:spotify_songs",
title="The most popular 20 songs in 2020 ")+
theme_classic() +
theme(axis.line.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text = element_text(color="black"),
axis.title = element_blank(),
legend.position = "none")+
geom_vline(xintercept=mean_popularity, color="grey40", linetype=3)+
annotate(
"text",
x = mean_popularity+5 , y = 5.5,
label = "The\naverage\npopularity",
vjust = 1, size = 3, color = "grey40")+
annotate(
"curve",
x =mean_popularity +5 , y = 5.5,
xend = mean_popularity, yend = 7.5,
arrow = arrow(length = unit(0.2, "cm"), type = "closed"),
color = "grey40"
)
p2
#########################################################
## top 20 by track popularity
top20 <- spotify[year==2020,.(song=unique(track_name)),by=track_popularity][order(desc(track_popularity))][1:20]
p2 <- ggplot(top20, aes(x = track_popularity, y = reorder(song,track_popularity), color = track_popularity)) +
geom_point(size = 4) +
geom_segment(aes(xend = 10, yend = song), size = 2)+
geom_text(aes(label = track_popularity), color = "white", size = 2)+
scale_x_continuous("", expand = c(0, 0), limits = c(0, 105), position = "top") +
scale_color_gradientn(colors = brewer.pal(5, "RdYlBu")[-(2:4)])+
labs(caption="Source: tidytuesday:spotify_songs",
title="The most popular 20 songs in 2020 ")+
theme_classic() +
theme(axis.line.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text = element_text(color="black"),
axis.title = element_blank(),
legend.position = "none")+
geom_vline(xintercept=mean_popularity, color="grey40", linetype=3)+
annotate(
"text",
x = mean_popularity+5 , y = 5.5,
label = "The\naverage\npopularity",
vjust = 1, size = 3, color = "grey40")+
annotate(
"curve",
x =mean_popularity +5 , y = 5.5,
xend = mean_popularity, yend = 7.5,
arrow = arrow(length = unit(0.2, "cm"), type = "closed"),
color = "grey40"
)
top_artists <- spotify[,.(number_of_songs = .N,avg_pop=mean(track_popularity)),by=.(track_artist,year)][order(desc(year))]
View(top_artists)
top_artists <- top_artists[,.(popularity=avg_pop*number_of_songs),by=.(track_artist,year)][order(desc(year))]
View(top_artists)
top_artists <- spotify[,.(number_of_songs = .N,avg_pop=mean(track_popularity)),by=.(track_artist,year)][order(desc(year))]
top_artists <- top_artists[,.(popularity=avg_pop*number_of_songs),by=.(track_artist,year)][order(desc(year))]
View(top_artists)
top_artists <- spotify[,.(number_of_songs = .N,avg_pop=mean(track_popularity)),by=.(track_artist,year)][order(desc(year))]
View(top_artists)
top_artists <- spotify[,.(number_of_songs = .N,
avg_pop=mean(track_popularity),
avg_energy=mean(energy),
),by=.(track_artist,year)][order(desc(year))]
top_artists <- spotify[,.(number_of_songs = .N,
avg_pop=mean(track_popularity),
avg_energy=mean(energy)
),by=.(track_artist,year)][order(desc(year))]
View(top_artists)
top_artists <- top_artists[,.(performance:=asd),by=.(track_artist,year)][order(desc(year))]
top_artists <- top_artists[,.(performance=(number_of_songs*0.02 + avg_pop*0.04 + avg_energy*0.04)),by=.(track_artist,year)][order(desc(year))]
top_artists_formatted <- top_artists %>%
group_by(year) %>%
mutate(rank = rank(-popularity)) %>%
group_by(track_artist) %>%
filter(rank <=10) %>%
ungroup()
top_artists <- top_artists[,.(popularity=(number_of_songs*0.02 + avg_pop*0.04 + avg_energy*0.04)),by=.(track_artist,year)][order(desc(year))]
#########################################################
## top 10 artists
top_artists <- spotify[,.(number_of_songs = .N,
avg_pop=mean(track_popularity),
avg_energy=mean(energy)
),by=.(track_artist,year)][order(desc(year))]
top_artists <- top_artists[,.(popularity=(number_of_songs*0.02 + avg_pop*0.04 + avg_energy*0.04)),by=.(track_artist,year)][order(desc(year))]
top_artists_formatted <- top_artists %>%
group_by(year) %>%
mutate(rank = rank(-popularity)) %>%
group_by(track_artist) %>%
filter(rank <=10) %>%
ungroup()
p3 <- ggplot(top_artists_formatted, aes(rank, group = track_artist,
fill = as.factor(track_artist), color = as.factor(track_artist))) +
geom_tile(aes(y = popularity/2,
height = popularity,
width = 0.9), alpha = 0.8, color = NA) +
geom_text(aes(y = 0, label = paste(track_artist, " ")), vjust = 0.2, hjust = 1) +
geom_text(aes(y=popularity,label=popularity, hjust=0)) +
coord_flip(clip = "off", expand = FALSE) +
scale_y_continuous(labels = scales::comma) +
scale_x_reverse() +
guides(color = FALSE, fill = FALSE) +
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position="none",
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.grid.major.x = element_line( size=.1, color="grey" ),
panel.grid.minor.x = element_line( size=.1, color="grey" ),
plot.title=element_text(size=25, hjust=0.5, face="bold", colour="grey", vjust=-1),
plot.subtitle=element_text(size=18, hjust=0.5, face="italic", color="grey"),
plot.caption =element_text(size=8, hjust=0.5, face="italic", color="grey"),
plot.background=element_blank(),
plot.margin = margin(2,2, 2, 4, "cm"))
anim = p3 + transition_states(year, transition_length = 2, state_length = 1) +
view_follow(fixed_x = TRUE)  +
labs(title = 'Top 10 Artists',
subtitle  =  "Year : {closest_state}",
caption  = "tidytuesday:spotify_songs")
anim
#########################################################
## top 10 artists
top_artists <- spotify[,.(number_of_songs = .N,
avg_pop=mean(track_popularity),
avg_energy=mean(energy)
),by=.(track_artist,year)][order(desc(year))]
top_artists$number_of_songs <- count(top_artists$number_of_songs)/sum(top_artists$number_of_songs)
class(top_artists$number_of_songs)
sum(top_artists$number_of_songs)
top_artists$number_of_songs <- as.numeric(top_artists$number_of_songs)
top_artists$number_of_songs <- count(top_artists$number_of_songs)/sum(top_artists$number_of_songs)
count(top_artists$number_of_songs)
sum(top_artists$number_of_songs)
#########################################################
## top 10 artists
top_artists <- spotify[,.(number_of_songs = .N,
avg_pop=mean(track_popularity),
avg_energy=mean(energy)),
by=.(track_artist,year)][order((year))]
View(top_artists)
top_artists <- top_artists[,.(popularity=(number_of_songs*0.02*(100/top_artists$number_of_songs) + avg_pop*0.04 + avg_energy*0.04)),by=.(track_artist,year)][order(desc(year))]
number_of_songs*0.02*(100/top_artists$number_of_songs)
top_artists$number_of_songs*0.02*(100/top_artists$number_of_songs
top_artists <- top_artists[,.(popularity=(top_artists$number_of_songs*(100/top_artists$number_of_songs) + avg_pop*0.04 + avg_energy*0.04)),
top_artists <- top_artists[,.(popularity=(top_artist$number_of_songs*(100/top_artists$number_of_songs) + avg_pop*0.04 + avg_energy*0.04)),
by=.(track_artist,year)][order(desc(year))]
#########################################################
## top 10 artists
top_artists <- spotify[,.(number_of_songs = .N,
avg_pop=mean(track_popularity),
avg_energy=mean(energy)),
by=.(track_artist,year)][order((year))]
top_artists <- top_artists[,.(popularity=(top_artists$number_of_songs*(100/top_artists$number_of_songs) + avg_pop*0.04 + avg_energy*0.04)),
by=.(track_artist,year)][order(desc(year))]
top_artists <- top_artists[,.(popularity=(number_of_songs*0.02 + avg_pop*0.04 + avg_energy*0.04)),
by=.(track_artist,year)][order(desc(year))]
View(top_artists)
View(top_artists)
#########################################################
## top 10 artists
top_artists <- spotify[,.(avg_pop=mean(track_popularity),
avg_energy=mean(energy)*100),
by=.(track_artist,year)][order((year))]
View(top_artists)
top_artists <- top_artists[,.(popularity=avg_pop*0.5 + avg_energy*0.5),
by=.(track_artist,year)][order(desc(year))]
View(top_artists)
#########################################################
## top 10 artists
top_artists <- spotify[,.(avg_pop=mean(track_popularity),
avg_energy=mean(energy)*100),
by=.(track_artist,year)][order((year))]
top_artists <- top_artists[,.(popularity=avg_pop*0.5 + avg_energy*0.5),
by=.(track_artist,year)][order(desc(year))]
top_artists_formatted <- top_artists %>%
group_by(year) %>%
mutate(rank = rank(-popularity)) %>%
group_by(track_artist) %>%
filter(rank <=10) %>%
ungroup()
p3 <- ggplot(top_artists_formatted, aes(rank, group = track_artist,
fill = as.factor(track_artist), color = as.factor(track_artist))) +
geom_tile(aes(y = popularity/2,
height = popularity,
width = 0.9), alpha = 0.8, color = NA) +
geom_text(aes(y = 0, label = paste(track_artist, " ")), vjust = 0.2, hjust = 1) +
geom_text(aes(y=popularity,label=popularity, hjust=0)) +
coord_flip(clip = "off", expand = FALSE) +
scale_y_continuous(labels = scales::comma) +
scale_x_reverse() +
guides(color = FALSE, fill = FALSE) +
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position="none",
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.grid.major.x = element_line( size=.1, color="grey" ),
panel.grid.minor.x = element_line( size=.1, color="grey" ),
plot.title=element_text(size=25, hjust=0.5, face="bold", colour="grey", vjust=-1),
plot.subtitle=element_text(size=18, hjust=0.5, face="italic", color="grey"),
plot.caption =element_text(size=8, hjust=0.5, face="italic", color="grey"),
plot.background=element_blank(),
plot.margin = margin(2,2, 2, 4, "cm"))
anim = p3 + transition_states(year, transition_length = 2, state_length = 1) +
view_follow(fixed_x = TRUE)  +
labs(title = 'Top 10 Artists',
subtitle  =  "Year : {closest_state}",
caption  = "tidytuesday:spotify_songs")
anim
#########################################################
## top 10 artists
top_artists <- spotify[,.(avg_pop=mean(track_popularity),
avg_energy=mean(energy)*100),
by=.(track_artist,year)][order((year))]
top_artists <- top_artists[,.(popularity=round(avg_pop*0.5 + avg_energy*0.5)),
by=.(track_artist,year)][order(desc(year))]
# check frequency by playlist_genre
datasummary( playlist_genre ~ N + Percent() , data = spotify)
p4 <- ggarrange(p4a, p4b, ncol = 1, nrow = 2)
#########################################################
# check the association between the tempo and danceability
# how danceability is changing based on the tempo?
# which range is the best tempo for the highest danceability?
tempovs<- spotify[,.(track_name,playlist_genre,track_popularity,danceability,energy,liveness,valence,tempo)][order(track_popularity)]
p4a <- ggplot(tempovs,aes(tempo,valence))+geom_point(alpha=0.1)+
geom_smooth(method = "loess",se=F,aes(color=playlist_genre)) +theme_classic()+theme(legend.position ="none")
p4b <- ggplot(tempovs,aes(tempo,danceability))+geom_point(alpha=0.1)+
geom_smooth(method = "loess",se=F,aes(color=playlist_genre))+theme_classic()
p4 <- ggarrange(p4a, p4b, ncol = 1, nrow = 2)
p4 <- ggarrange(p4a, p4b, ncol = 1, nrow = 2)
p4
p4a <- ggplot(tempovs,aes(tempo,valence))+geom_point(alpha=0.1)+
geom_smooth(method = "loess",se=F,aes(color=playlist_genre)) +theme_classic()+theme(legend.position ="top")
p4b <- ggplot(tempovs,aes(tempo,danceability))+geom_point(alpha=0.1)+
geom_smooth(method = "loess",se=F,aes(color=playlist_genre))+theme_classic()+theme(legend.position ="none")
p4 <- ggarrange(p4a, p4b, ncol = 1, nrow = 2)
p4 <- ggarrange(p4a, p4b, ncol = 1, nrow = 2)
p4
p4a <- ggplot(tempovs,aes(tempo,valence))+geom_point(alpha=0.1)+
geom_smooth(method = "loess",se=F,aes(color=playlist_genre)) +theme_classic()+theme(legend.position ="none")
p4b <- ggplot(tempovs,aes(tempo,danceability))+geom_point(alpha=0.1)+
geom_smooth(method = "loess",se=F,aes(color=playlist_genre))+theme_classic()
p4 <- ggarrange(p4a, p4b, ncol = 2, nrow = 2)
ggplot(tempovs,aes(valence,danceability))+geom_point()
ggplot(tempovs,aes(valence,danceability))+geom_point()+geom_smooth()
ggplot(tempovs,aes(valence,danceability))+geom_point()+geom_smooth(method = "loess")
anim = p3 + transition_states(year) +
view_follow(fixed_x = TRUE)  +
labs(title = 'Top 10 Artists',
subtitle  =  "Year : {closest_state}",
caption  = "tidytuesday:spotify_songs")
anim
